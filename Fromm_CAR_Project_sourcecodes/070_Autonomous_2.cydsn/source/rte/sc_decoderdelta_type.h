
/*
 * Filename: sc_decoderdelta_type.h
 *
 * Author: Autogenerated by H-DA RTE Generator, (c) Prof. Fromm
 *
 * Description: Contains the decoder delta values
 */

#ifndef _H_DEFINE_SC_DECODERDELTA_TYPE
#define _H_DEFINE_SC_DECODERDELTA_TYPE

#include "project.h"
#include "global.h"
#include "rte_types.h"

/* USER CODE START SC_DECODERDELTA_INCLUDES */

/* USER CODE END SC_DECODERDELTA_INCLUDES */



/**********************************************************************
 *       Type Definition for SC_DECODERDELTA signal    
 **********************************************************************/

/* USER CODE START SC_DECODERDELTA_USERDEFINITIONS */

/* USER CODE END SC_DECODERDELTA_USERDEFINITIONS */

typedef 
/* USER CODE START SC_DECODERDELTA_SIGNALDATADEFINITION */
struct
{
	sint16_t m_rr;  /*!< Delta engine RR */
    sint16_t m_rl;  /*!< Delta engine RL */
    sint16_t m_fr;  /*!< Delta engine FR */
    sint16_t m_fl;  /*!< Delta engine FL */
} 
/* USER CODE END SC_DECODERDELTA_SIGNALDATADEFINITION */
SC_DECODERDELTA_data_t;

/* USER CODE START InitSC_DECODERDELTA */
#define SC_DECODERDELTA_INIT_DATA ((SC_DECODERDELTA_data_t){0,0,0,0})
/* USER CODE END InitSC_DECODERDELTA */


/**
 * Default IN driver API
 * \param SC_DECODERDELTA_data_t *const data : [OUT] scaled data read from the driver
 * \return RC_SUCCESS is all was ok, error code otherwise
 */
RC_t SC_DECODERDELTA_driverIn(SC_DECODERDELTA_data_t *const data);




/* USER CODE START SC_DECODERDELTA_USERFUNCTIONS */

/* USER CODE END SC_DECODERDELTA_USERFUNCTIONS */


#endif