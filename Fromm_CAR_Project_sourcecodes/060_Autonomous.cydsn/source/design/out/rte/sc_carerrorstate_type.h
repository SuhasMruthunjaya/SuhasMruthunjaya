
/*
 * Filename: sc_carerrorstate_type.h
 *
 * Author: Autogenerated by H-DA RTE Generator, (c) Prof. Fromm
 *
 * Description: Error state as set by the central error state machine. Will control the safe state independently from the application.
 */

#ifndef _H_DEFINE_SC_CARERRORSTATE_TYPE
#define _H_DEFINE_SC_CARERRORSTATE_TYPE

#include "project.h"
#include "global.h"
#include "rte_types.h"

/* USER CODE START SC_CARERRORSTATE_INCLUDES */

/* USER CODE END SC_CARERRORSTATE_INCLUDES */



/**********************************************************************
 *       Type Definition for SC_CARERRORSTATE signal    
 **********************************************************************/

/* USER CODE START SC_CARERRORSTATE_USERDEFINITIONS */

typedef enum 
{   ERROR_LED_NONE,
    ERROR_LED_RED,
    ERROR_LED_YELLOW,
} CARERROR_Led_t;
    
/* USER CODE END SC_CARERRORSTATE_USERDEFINITIONS */

typedef 
/* USER CODE START SC_CARERRORSTATE_SIGNALDATADEFINITION */
struct
{
	uint8_t         m_maxSpeed;         /*!< max speed in percentage, 0, 50 or 100 */
    CARERROR_Led_t  m_led;              /*!< error led which shall be turned on */
    
} 
/* USER CODE END SC_CARERRORSTATE_SIGNALDATADEFINITION */
SC_CARERRORSTATE_data_t;

/* USER CODE START InitSC_CARERRORSTATE */
#define SC_CARERRORSTATE_INIT_DATA ((SC_CARERRORSTATE_data_t){0, ERROR_LED_RED})
/* USER CODE END InitSC_CARERRORSTATE */




/**
 * Default OUT driver API
 * \param const SC_CARERRORSTATE_data_t  *const data : [IN] signal data for the driver, will be scaled in this function
 * \return RC_SUCCESS is all was ok, error code otherwise
 */
RC_t SC_CARERRORSTATE_driverOut(const SC_CARERRORSTATE_data_t  *const data);


/* USER CODE START SC_CARERRORSTATE_USERFUNCTIONS */

/* USER CODE END SC_CARERRORSTATE_USERFUNCTIONS */


#endif