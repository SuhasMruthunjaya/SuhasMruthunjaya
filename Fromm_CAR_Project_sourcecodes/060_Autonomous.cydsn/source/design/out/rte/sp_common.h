
/*
 * Filename: sp_common.h
 *
 * Author: Autogenerated by H-DA RTE Generator, (c) Prof. Fromm
 *
 * Description: The common global signal pool, all signals will be stored here
 */

#ifndef _H_DEFINE_SP_COMMON
#define _H_DEFINE_SP_COMMON

#include "project.h"
#include "global.h"
#include "rte_types.h"

/* USER CODE START SP_COMMON_INCLUDES */

/* USER CODE END SP_COMMON_INCLUDES */



#include "sc_joystick.h"
#include "sc_carspeed.h"
#include "sc_enginespeed.h"
#include "sc_enginespeed.h"
#include "sc_protocol.h"
#include "sc_protocol.h"
#include "sc_carstate.h"
#include "sc_event_in.h"
#include "sc_event_out.h"
#include "sc_carerrorstate.h"
#include "sc_ultrasonicarray.h"
#include "sc_diagnosticrequest.h"



/*
 * description: Joystick x,y for controlling the car manually
 * indriver: 0
 * name: so_joystick
 * onDataError: 0
 * onDataUpdate: ev_joystick_onData
 * outdriver: 0
 * resource: None
 * shortname: joystick
 * signalclass: sc_joystick
 * signalpool: sp_common
 */
extern SC_JOYSTICK_t SO_JOYSTICK_signal;


/*
 * description: Targetspeed defined by the user or ADAS algorithm
 * indriver: 0
 * name: so_targetspeed
 * onDataError: 0
 * onDataUpdate: 0
 * outdriver: 0
 * resource: None
 * shortname: targetspeed
 * signalclass: sc_carSpeed
 * signalpool: sp_common
 */
extern SC_CARSPEED_t SO_TARGETSPEED_signal;


/*
 * description: The currentspeed reported by the engine decoder
 * indriver: default
 * name: so_currentspeed
 * onDataError: 0
 * onDataUpdate: 0
 * outdriver: 0
 * resource: None
 * shortname: currentspeed
 * signalclass: sc_engineSpeed
 * signalpool: sp_common
 */
extern SC_ENGINESPEED_t SO_CURRENTSPEED_signal;


/*
 * description: Controlspeed being send to the engine
 * indriver: 0
 * name: so_controlspeed
 * onDataError: 0
 * onDataUpdate: 0
 * outdriver: default
 * resource: None
 * shortname: controlspeed
 * signalclass: sc_engineSpeed
 * signalpool: sp_common
 */
extern SC_ENGINESPEED_t SO_CONTROLSPEED_signal;


/*
 * description: Incoming protocol - note, that the data will be set asynchronously.
 * indriver: default
 * name: so_protocolRx
 * onDataError: ev_protocolrx_onError
 * onDataUpdate: 0
 * outdriver: 0
 * resource: None
 * shortname: protocolRx
 * signalclass: sc_protocol
 * signalpool: sp_common
 */
extern SC_PROTOCOL_t SO_PROTOCOLRX_signal;


/*
 * description: Outgoing Protocol
 * indriver: 0
 * name: so_protocolTx
 * onDataError: 0
 * onDataUpdate: 0
 * outdriver: default
 * resource: None
 * shortname: protocolTx
 * signalclass: sc_protocol
 * signalpool: sp_common
 */
extern SC_PROTOCOL_t SO_PROTOCOLTX_signal;


/*
 * description: Signal containing car state and other central data
 * indriver: 0
 * name: so_carState
 * onDataError: 0
 * onDataUpdate: 0
 * outdriver: 0
 * resource: None
 * shortname: carState
 * signalclass: sc_carstate
 * signalpool: sp_common
 */
extern SC_CARSTATE_t SO_CARSTATE_signal;


/*
 * description: Incoming Event
 * indriver: 0
 * name: so_eventIn
 * onDataError: 0
 * onDataUpdate: ev_eventin_onData
 * outdriver: 0
 * resource: None
 * shortname: eventIn
 * signalclass: sc_event_in
 * signalpool: sp_common
 */
extern SC_EVENT_IN_t SO_EVENTIN_signal;


/*
 * description: Outgoing Event
 * indriver: 0
 * name: so_eventOut
 * onDataError: 0
 * onDataUpdate: ev_eventout_onData
 * outdriver: 0
 * resource: None
 * shortname: eventOut
 * signalclass: sc_event_out
 * signalpool: sp_common
 */
extern SC_EVENT_OUT_t SO_EVENTOUT_signal;


/*
 * description: Signal containing the car error state
 * indriver: 0
 * name: so_carErrorState
 * onDataError: 0
 * onDataUpdate: 0
 * outdriver: default
 * resource: None
 * shortname: carErrorState
 * signalclass: sc_carErrorState
 * signalpool: sp_common
 */
extern SC_CARERRORSTATE_t SO_CARERRORSTATE_signal;


/*
 * description: Ultrasonic array
 * indriver: default
 * name: so_ultrasonic
 * onDataError: 0
 * onDataUpdate: 0
 * outdriver: 0
 * resource: None
 * shortname: ultrasonic
 * signalclass: sc_ultrasonicArray
 * signalpool: sp_common
 */
extern SC_ULTRASONICARRAY_t SO_ULTRASONIC_signal;


/*
 * description: Disgnostic Service Request
 * indriver: 0
 * name: so_diagnosticRequest
 * onDataError: 0
 * onDataUpdate: ev_diagnosticrequest_onData
 * outdriver: 0
 * resource: None
 * shortname: diagnosticRequest
 * signalclass: sc_diagnosticRequest
 * signalpool: sp_common
 */
extern SC_DIAGNOSTICREQUEST_t SO_DIAGNOSTICREQUEST_signal;



/*
 * Increments the age of the signals in this pool 
 */
void RTE_timertick_sp_common_tick(uint32_t tick);

#endif