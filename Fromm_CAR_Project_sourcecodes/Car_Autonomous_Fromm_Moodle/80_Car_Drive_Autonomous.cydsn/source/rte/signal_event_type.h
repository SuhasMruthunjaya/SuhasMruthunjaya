/*
 * Signal_Event_type.h
 *
 * Author: Autogenerated by H-DA RTE Generator, (c) Prof. Fromm
 */



#ifndef SIGNAL_EVENT_TYPE_H_
#define SIGNAL_EVENT_TYPE_H_

#include "global.h"
#include "signal_protocol_type.h"
    
/*****************************************************************************************
 *************** Type Definition for SIGNAL_EVENT signal                     **************************
 *****************************************************************************************/

typedef enum {
    
    //Error cases
    EV_NoEvent,
    EV_Reset,
    
    //Remote internal events
    EV_BUTTON_1,
    EV_BUTTON_2,
    EV_BUTTON_3,
    EV_BUTTON_4,
    
    //Data send from Car to Remote
    EV_Connect_ACK,
    EV_Disconnect_ACK,
    EV_Feature_List,
    
    //Data send from Remote to Car
    EV_Joystick,
    EV_Stop,
    
    EV_Connect,
    EV_Disconnect,
    EV_RequestFeature,
    EV_ActivateFeature
} EVENT_t;


    
#define EVENT_PAYLOADSIZE PROT_SIZEPAYLOAD

typedef struct
{
    EVENT_t m_ev;
    uint8_t m_lengthPayload;
    uint8_t m_payload[EVENT_PAYLOADSIZE];
} SIGNAL_EVENT_data_t;


#define SIGNAL_EVENT_INIT_DATA ((SIGNAL_EVENT_data_t){0})


/**
 * Default IN driver API - may be deleted if not required
 * \param SIGNAL_EVENT_data_t *const data : [OUT] scaled data read from the driver
 * \return RC_SUCCESS is all was ok, error code otherwise
 */
RC_t SIGNAL_EVENT_driverIn(SIGNAL_EVENT_data_t *const data);


/**
 * Default IN driver API - may be deleted if not required
 * \param const SIGNAL_EVENT_data_t  *const data : [IN] signal data for the driver, will be scaled in this function
 * \return RC_SUCCESS is all was ok, error code otherwise
 */
RC_t SIGNAL_EVENT_driverOut(const SIGNAL_EVENT_data_t  *const data);



#endif /* SIGNAL_EVENT_TYPE_H_ */

