/*
 * Signal_Engine_type.h
 *
 * Author: Autogenerated by H-DA RTE Generator, (c) Prof. Fromm
 */



#ifndef SIGNAL_ENGINE_TYPE_H_
#define SIGNAL_ENGINE_TYPE_H_

#include "global.h"

/*****************************************************************************************
 *************** Type Definition for SIGNAL_ENGINE signal       **************************
 *****************************************************************************************/



typedef struct
{
    sint16_t m_rpm_fl;         /**< \brief rpm of the wheel, check ENG_MAXRPM for the given engine */
    sint16_t m_rpm_fr;         /**< \brief rpm of the wheel, check ENG_MAXRPM for the given engine */
    sint16_t m_rpm_rl;         /**< \brief rpm of the wheel, check ENG_MAXRPM for the given engine */
    sint16_t m_rpm_rr;         /**< \brief rpm of the wheel, check ENG_MAXRPM for the given engine */
} SIGNAL_ENGINE_data_t;


#define SIGNAL_ENGINE_INIT_DATA ((SIGNAL_ENGINE_data_t){0})


/**
 * Default IN driver API - may be deleted if not required
 * \param SIGNAL_ENGINE_data_t *const data : [OUT] scaled data read from the driver
 * \return RC_SUCCESS is all was ok, error code otherwise
 */
RC_t SIGNAL_ENGINE_driverIn(SIGNAL_ENGINE_data_t *const data);


/**
 * Default IN driver API - may be deleted if not required
 * \param const SIGNAL_ENGINE_data_t  *const data : [IN] signal data for the driver, will be scaled in this function
 * \return RC_SUCCESS is all was ok, error code otherwise
 */
RC_t SIGNAL_ENGINE_driverOut(const SIGNAL_ENGINE_data_t  *const data);



#endif /* SIGNAL_ENGINE_TYPE_H_ */

