/*
 * Signal_CarState_type.h
 *
 * Author: Autogenerated by H-DA RTE Generator, (c) Prof. Fromm
 */



#ifndef SIGNAL_CARSTATE_TYPE_H_
#define SIGNAL_CARSTATE_TYPE_H_

#include "global.h"

/*****************************************************************************************
 *************** Type Definition for SIGNAL_CARSTATE signal                     **************************
 *****************************************************************************************/



typedef enum
{
    IS_IDLE,        /**< \brief Car is stopped and not connected */
    IS_CONNECTED,   /**< \brief Car is stopped and connected, can provide feature list */
    IS_DRIVING      /**< \brief Car is driving with the requested feature */
} SIGNAL_CARSTATE_data_t;

#define SIGNAL_CARSTATE_INIT_DATA IS_IDLE


/**
 * Default IN driver API - may be deleted if not required
 * \param SIGNAL_CARSTATE_data_t *const data : [OUT] scaled data read from the driver
 * \return RC_SUCCESS is all was ok, error code otherwise
 */
RC_t SIGNAL_CARSTATE_driverIn(SIGNAL_CARSTATE_data_t *const data);


/**
 * Default IN driver API - may be deleted if not required
 * \param const SIGNAL_CARSTATE_data_t  *const data : [IN] signal data for the driver, will be scaled in this function
 * \return RC_SUCCESS is all was ok, error code otherwise
 */
RC_t SIGNAL_CARSTATE_driverOut(const SIGNAL_CARSTATE_data_t  *const data);



#endif /* SIGNAL_CARSTATE_TYPE_H_ */

