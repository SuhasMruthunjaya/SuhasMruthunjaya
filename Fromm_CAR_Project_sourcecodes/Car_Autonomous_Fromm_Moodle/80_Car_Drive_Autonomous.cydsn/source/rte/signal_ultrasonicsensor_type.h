/*
 * Signal_UltrasonicSensor_type.h
 *
 * Author: Autogenerated by H-DA RTE Generator, (c) Prof. Fromm
 */



#ifndef SIGNAL_ULTRASONICSENSOR_TYPE_H_
#define SIGNAL_ULTRASONICSENSOR_TYPE_H_

#include "global.h"
#include "ultrasonic_cfg.h"
    
/*****************************************************************************************
 *************** Type Definition for SIGNAL_ULTRASONICSENSOR signal  *********************
 *****************************************************************************************/

typedef enum{US_ISMEASURING, US_ISVALID, US_ISINVALID} US_status_t;

typedef struct
{
    US_id_t     m_id;           /**< \brief identifier of the sensor */
    US_status_t m_status;       /**< \brief current status of the sensor, required to sync fire and capture */
    uint16_t    m_distance;     /**< \brief distance in cm. Range 2..300 (approx.) */
} SIGNAL_ULTRASONICSENSOR_data_t;

#define SIGNAL_ULTRASONICSENSOR_INIT_DATA ((SIGNAL_ULTRASONICSENSOR_data_t){US_NONE, US_ISINVALID, 0})



/**
 * Default IN driver API - may be deleted if not required
 * \param SIGNAL_ULTRASONICSENSOR_data_t *const data : [OUT] scaled data read from the driver
 * \return RC_SUCCESS is all was ok, error code otherwise
 */
RC_t SIGNAL_ULTRASONICSENSOR_driverIn(SIGNAL_ULTRASONICSENSOR_data_t *const data);


/**
 * Default IN driver API - may be deleted if not required
 * \param const SIGNAL_ULTRASONICSENSOR_data_t  *const data : [IN] signal data for the driver, will be scaled in this function
 * \return RC_SUCCESS is all was ok, error code otherwise
 */
RC_t SIGNAL_ULTRASONICSENSOR_driverOut(const SIGNAL_ULTRASONICSENSOR_data_t  *const data);



#endif /* SIGNAL_ULTRASONICSENSOR_TYPE_H_ */

